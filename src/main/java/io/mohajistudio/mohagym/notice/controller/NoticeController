package io.mohajistudio.mohagym.notice.controller;

import com.example.post.model.Board;
import com.example.post.service.BoardService;
import io.mohajistudio.mohagym.entity.Notice;
import io.mohajistudio.mohagym.notice.service.NoticeService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
//import org.springframework.http.HttpStatus;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RequiredArgsConstructor
@RestController
@RequestMapping("/api")
public class NoticeController {


    @Autowired
    private NoticeService noticeService;

    // create board rest api
    @PostMapping("/boards")
    public Notice createBoard(@RequestBody Notice notice) {
        return noticeService.createBoard(notice);
    }





    // list all boards
    @GetMapping("/boards")
    public List<Notice> listAllBoards() {
        return noticeService.listAllBoards();
    }

    // get board by id
    @GetMapping("/boards/{id}")
    public ResponseEntity<Notice> getBoardById(@PathVariable Integer id) {
        return noticeService.getBoardById(id);
    }

    // update board
    @PutMapping("/boards/{id}")
    public ResponseEntity<Notice> updateBoard(
            @PathVariable Integer id, @RequestBody Notice boardDetails) {
        return noticeService.updateBoard(id, boardDetails);
    }

    // delete board
    @DeleteMapping("/boards/{id}")
    public ResponseEntity<Map<String, Boolean>> deleteBoard(@PathVariable Integer id) {
        return noticeService.deleteBoard(id);
    }
    // list all boards with paging
    @GetMapping("/paging")
    public ResponseEntity<Page<Notice>> listAllBoards(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<Notice> boards = noticeService.listAllBoards(pageable);
        return ResponseEntity.ok(boards);
    }

}
